{"name":"Bem-data-source","tagline":"Tool for collect documentation and exaples from libraries and common sources for bem-info and legoa","body":"bem-data-source\r\n===============\r\n\r\nИнструмент для версионированной сборки документации и примеров библиотек для проектов bem-info legoa-www.\r\n\r\n## Установка\r\n\r\n* клонировать репозиотрий `git clone git://github.com/bem/bem-data-source.git`\r\n* перейти в директорию с выкачанным проектом `cd bem-data-source`\r\n* запустить команду `make`\r\n\r\nКоманда `make` устанавливает зависимости для проекта и генерирует конфигурационный файл:\r\n* `config/credentials.json`\r\n\r\n## Конфигурирование\r\n\r\nКонфигурация инструмента описывается в файлах `config/config.json`, `config/credentials.json`.\r\n\r\n### Файл config/config.json\r\n\r\n* `logLevel` - флаг уровня логгирования. может принимать значения: (\"verbose\", \"debug\", \"info\", \"warn\", \"error\")\r\n* `languages` - массив локалей\r\n\r\n### Файл config/credentials.json\r\n\r\nФайл с токенами доступа к публичным и приватным репозиториям (github.com и github.yandex-team.ru соответственно)\r\nНеобходимо сгенерировать токены доступа в настройках профиля пользователя на github.com и github.yandex.team.ru\r\nи вставить как значения соответствующих token-полей в данном файле.\r\n\r\n```\r\n\"credentials\": {\r\n    \"public\": \"\",\r\n    \"private\": \"\"\r\n}\r\n```\r\n\r\nТакже в этом файле настраивается конфигурация для доступа целевому репозиторию\r\nв который будет помещен результат сборки, например:\r\n\r\n```\r\n\"dataConfig\": {\r\n    \"private\": false,\r\n    \"user\": \"bem\",\r\n    \"repo\": \"bem-info-libs\",\r\n    \"ref\": \"master\"\r\n}\r\n```\r\nЗдесь: \r\n\r\n* `private` - обозначает github хост на котором хранитс репозиторий. `false` - для публичного гитхаба\r\n`github.com` и `true` - для корпоративного гитхаба.\r\n* `user` - имя пользователя или название организации.\r\n* `repo` - название рапозитория\r\n* `ref` - название ветки (по умолчанию \"master\")\r\n\r\n### Файл config/pattern.js\r\n\r\nВ этом файле описываются для каждой библиотеки можно переопределить дефолтные настройки сборки, например:\r\n\r\n```\r\n'bem-components': {\r\n    builder: 'enb',\r\n    command: 'YENV=production enb make tests && enb make docs',\r\n    copy: ['*.docs', '*.tests'],\r\n    docs: {\r\n        readme: {\r\n            folder: '',\r\n            pattern: 'README.md'\r\n        },\r\n        changelog: {\r\n            folder: '',\r\n            pattern: 'CHANGELOG.md'\r\n        },\r\n        migration: {\r\n            folder: '',\r\n            pattern: 'MIGRATION.md'\r\n        },\r\n        notes: {\r\n            folder: '',\r\n            pattern: 'MIGRATION.md'\r\n        }\r\n        pattern: {\r\n            data: '%s.data.json',\r\n            jsdoc: '%s.jsdoc.html'\r\n        },\r\n    },    \r\n    tasks: []\r\n}\r\n```\r\n\r\nЗдесь:\r\n\r\n#### builder \r\nНазвание инструмента с помощью которого будет выполняться сборка документации и примеров.\r\n\r\nДопустимые значения `enb` и `bem-tools`. \r\nЗначение по умолчанию `bem-tools`.\r\n \r\n#### command \r\nCтрока с названием команды для запуска сборки. \r\nЗначение по умолчанию `npm run build`\r\n\r\n#### copy \r\nМассив с шаблонами названий директорий с файлами документации и примеров, \r\nкоторые должны попасть в финальный результат сборки. \r\nПервым элементом данного массива должен быть шаблон директорий\r\nкоторые содержат файлы с документацией по блокам.\r\n\r\nЗначение по умолчанию `['*.sets']`\r\n\r\n#### docs\r\n\r\nОбъект с полями, которые в свою очередь также являются объектами.\r\nПозволяет задавать произвольный набор документов которые должны попасть в сборку библиотеки\r\n\r\n```\r\ndocs: {\r\n    readme: {\r\n        folder: '',\r\n        pattern: 'README.md'\r\n    },\r\n    changelog: {\r\n        folder: 'docs',\r\n        pattern: {\r\n            en: 'CHANGELOG.en.md',\r\n            ru: 'CHANGELOG.en.md'\r\n        }\r\n    },\r\n    migration: {\r\n        pattern: 'https://github.com/bem/bem-core/tree/v2/MIGRATION.md'\r\n    }\r\n    ...\r\n}    \r\n```\r\nЗдесь 'README.md' - загружается из корня проекта. Файлы changelog-ов будут загружены из директории 'docs',\r\nпо маске 'CHANGELOG.en.md' и 'CHANGELOG.ru.md' соответственно. При этом будут выбраны последние версии таких файлов,\r\nв случае когда в данной директории хранится несколько changelog - файлов и их названия содержат номер версии библиотеки.\r\nФайл миграции напрямую загружается с гитхаба с помощью github API с указанного адреса.\r\n\r\nИз данного примера видно, что можно задавать разные файлы для различных языков, а также указывать\r\nпроизвольный url к файлу как адрес данного файла в браузере.\r\n\r\n#### pattern \r\nОбъект с полями `data` и `jsdoc` в котором можно указать шаблоны файлов с документацией и js документацией к блокам. \r\n\r\nЗначение по умолчанию:\r\n\r\n```\r\npattern: {\r\n    data: '%s.data.json',\r\n    jsdoc: '%s.jsdoc.json'\r\n}\r\n```\r\n\r\n#### tasks \r\n\r\nМассив с коммандами которые будут выполнены для данной цели сборки \r\nв таком же порядке в каком они указаны в массиве.\r\n\r\n### Описание комманд для сборки:\r\n\r\nПримечание: `{lib}` - название библиотеки, `{ref}` - тег или ветка.\r\n\r\n* 'removeOutput' - удаляет папку `/output/{lib}/{ref}`.\r\n* 'createOutput' - создает папку `/output/{lib}/{ref}`.\r\n* 'gitClone' - клонирует проект из гитхаба в директорию `/content/{lib}/{ref}`. \r\n* 'gitCheckout' - переключает git на ветку или тег `{ref}`. \r\n* 'npmCacheClean' - отчищает кеш npm.\r\n* 'npmInstall' - устанавливает npm зависимости.\r\n* 'npmInstallBemSets' - устанавливает актуальную версию bem-sets.\r\n* 'npmInstallBem' - устанавливает актуальную версию bem-tools.\r\n* 'npmRunDeps' - запускает скрипт с алиасом 'npm run deps' в `package.json` файле.\r\n* 'copyBorschik' - копирует файл `.borschik` в `/content/{lib}/{ref}`.\r\n* 'npmRunBuild' - запускает скрипт указанный в параметре `command` для данной библотеки.\r\nПо умолчанию запускает скрипт с алиасом 'npm run build' в `package.json` файле.\r\n* 'copySets' - копирует папки с собранными файлами в `/output/{lib}/{ref}`\r\n* 'collectSets' - собирает данные в единый файл `/output/{lib}/{ref}/data.json`\r\n\r\n## Запуск\r\n\r\nЗапуск выполняется командой `node index.js` с указанием дополнительных опций:\r\n\r\n* `-p` или `--private`, если репозиторий внутренний\r\n* `-u` или `--user` - имя пользователя или название организации (обязательный параметр)\r\n* `-r` или `--repo` - название репозитория (обязательный параметр)\r\n* `-t` или `--tags` - название версии (тега) библиотеки\r\n* `-b` или `--branches` - название ветки библиотеки\r\n\r\nПосмотреть текущую версию приложения можно выполнив команду: `node index.js -v`\r\n\r\nОтветственный за разработку @bemer\r\n\r\nВопросы и пожелания присылать по адресу: bemer@yandex-team.ru\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}