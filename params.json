{"name":"Bem-data-source","tagline":"Tool for collect documentation and exaples from libraries and common sources for bem-info and legoa","body":"bem-data-source\r\n===============\r\n\r\n[![Build Status](https://travis-ci.org/bem-site/bem-data-source.svg?branch=master)](https://travis-ci.org/bem/bem-data-source)\r\n[![Dependency Status](https://david-dm.org/bem-site/bem-data-source.svg?style=flat)](https://david-dm.org/bem/bem-data-source)\r\n[![devDependency Status](https://david-dm.org/bem-site/bem-data-source/dev-status.svg?style=flat)](https://david-dm.org/bem/bem-data-source#info=devDependencies)\r\n\r\nДанный инструмент предназначен для публикации данных документации и примеров по библиотекам блоков.\r\n\r\n## Установка\r\n\r\n* клонировать репозиторий `git clone git://github.com/bem/bem-data-source.git`\r\n* перейти в директорию со скаченным проектом `cd bem-data-source`\r\n* установить npm зависимости коммандой `npm install`\r\n* сгенерировать приватный конфигурационный файл командой `npm run config`\r\n\r\nПосле выполнения `npm run config` должен появиться новый конфигурационный файл `config/private.json`.\r\n\r\n## Конфигурирование\r\n\r\nКонфигурация инструмента описывается в файлах `config/public.json`, `config/private.json`.\r\n\r\n### Файл config/public.json\r\n\r\n* `logLevel` - флаг уровня логгирования. может принимать значения: (\"verbose\", \"debug\", \"info\", \"warn\", \"error\")\r\n* `languages` - массив локалей\r\n* `maxOpenFiles` - максимальное количество открытых файлов. Этот параметр также определяет размер\r\nпорций файлов которые одновременно записываются в хранилище.\r\n* `storage` - объект хранилища данных, например:\r\n\r\n```\r\n\"storage\": {\r\n    \"cocaine\": {\r\n        \"debug\": false\r\n    }\r\n}\r\n```\r\n* `mailer` - объект с настройками почтовой рассылки. Настоятельно рекомендуется выносить данные\r\nнастройки в приватный конфигурационный файл `config/private.json`.\r\n\r\n### Файл config/private.json\r\n\r\nВ этом файле настриваются приватные параметры приложения, например пространство имен для хранилища:\r\n\r\n```\r\n{\r\n  \"storage\": {\r\n    \"cocaine\": {\r\n      \"namespace\": \"your_application_namespace\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nНастройки почтовой рассылки:\r\n\r\n```\r\n{\r\n  \"mailer\": {\r\n    \"host\": \"your e-mail-host\",\r\n     \"port\": 25,\r\n     \"from\": \"john.smith@gmail.com\",\r\n     \"to\": [\r\n       \"recepient1@gmail.com\",\r\n       \"recepient2@gmail.com\"\r\n     ]\r\n  }\r\n}\r\n```\r\n\r\n### [Декларации для сборки библиотеки](./docs/declarations.md)\r\n\r\n## CLI интерфейс\r\n\r\n#### Просмотр данных реестра библиотек в хранилище\r\n\r\nВыполняется командой `node bin/ds view` с указанием дополнительных опций:\r\n\r\n* `-r` или `--repo` - название репозитория (необязательный параметр)\r\n* `-v` или `--version` - название версии (тега или ветки) библиотеки (необязательный параметр)\r\n\r\nВ случае если указаны оба параметра, то выведется информация по конкретной указанной версии библиотеки.\r\n\r\nЕсли была передана только опция с названием библиотеки, то будет выведен список версий выбранной библиотеки.\r\n\r\nЕсли не был передан ни один из параметров, то будет выведен список библиотек, которые находятся в настоящее\r\nвремя в реестре.\r\n\r\n#### Удаление версии библиотеки из репозитория с собранными данными\r\n\r\nВыполняется командой `node bin/ds remove` с указанием дополнительных опций:\r\n\r\n* `-r` или `--repo` - название репозитория (обязательный параметр)\r\n* `-v` или `--version` - название версии (тега или ветки) библиотеки (обязательный параметр)\r\n* `-d` или `--dry` - режим тестового запуска. При этом данные не будут удалены а в консоль\r\nбудет выведено соответствующее сообщение.\r\n\r\nВНИМАНИЕ! При выполнении этой команды происходит НОБРАТИМОЕ УДАЛЕНИЕ из хранилища!\r\nБудьте внимательными при ее использовании.\r\n\r\n#### Замена документа в собранных данных библиотеки\r\n\r\nВыполняется командой `node bin/ds replace` с указанием дополнительных опций:\r\n\r\n* `-r` или `--repo` - название репозитория (обязательный параметр)\r\n* `-v` или `--version` - название версии (тега или ветки) библиотеки (обязательный параметр)\r\n* `-d` или `--doc` - ключ документа в сборки библиотеки ('readme', 'changelog', 'migration', ...) (обязательный параметр)\r\n* `-l` или `--lang` - языковая версия заменяемого документа. Если этот параметр неуказан, то будут заменены\r\nвсе яызковые версии документа, указанного в параметре `-d`.\r\n* `-u` или `--url` - url для `*.md` файла источника замены на github, например:\r\n\r\n#### Ручная публикация собранных данных библиотеки на удаленный сервер\r\n\r\nНаходясь в директории целевой библиотеки блоков, после сборки примеров и документации\r\nможно вызвать команду `publish` которая упакует собранные данные документации в формат\r\nнеобходимый для сайта, проведет архивацию всех примеров, отправит все данные по документации\r\nи примерам библиотеки в хранилище и добавит версию данной библиотеки в реестр собранных данных.\r\n\r\nПример:\r\n```\r\nnode {path to bem-data-source}/bin/ds publish [-v version]\r\n```\r\nГде `-v` - необязательный параметр названия версии (ветка, тег, пулл-реквест).\r\nЕсли этот параметр не будет указан, то название версии будет выбрано из файла `package.json`\r\n\r\n#### Просмотр текущей версии приложения.\r\n\r\nПосмотреть текущую версию приложения можно выполнив команду: `node bin/ds -v`\r\n\r\n## API\r\n\r\nКоманды `bem-data-source` можно выполнять не только вручную из коммандной строки, но также\r\nс помощью сторонних модулей. Это дает возможность интеграции `bem-data-source`\r\nв различные системы сборки документации и примеров библиотек блоков.\r\n\r\n#### View:\r\n\r\nПросмотр реестра собранных данных по библиотекам блоков.\r\n\r\n```\r\nvar ds = require('bem-data-source');\r\nds.view(repo, version, options);\r\n```\r\n\r\n* `repo` - необязательный параметр названия библиотеки (ветка, тег, пулл-реквест)\r\n* `version` - необязательный параметр названия версии (ветка, тег, пулл-реквест)\r\n* `options` - опциональне настройки команды.\r\n\r\nВозможные варианты применения:\r\n\r\n##### Просмотр списка библиотек в реестре:\r\n```\r\n    ds.view(null, null, options).then(function(libs) {\r\n        console.log(libs);\r\n    });\r\n```\r\n\r\n##### Просмотр списка версий библиотеки:\r\n```\r\n    ds.view('bem-core', null, options).then(function(versions) {\r\n        console.log(versions);\r\n    });\r\n```\r\n\r\n##### Просмотр информации по отдельной версии библиотеки:\r\n```\r\n    ds.view('bem-core', 'v2.3.0', options).then(function(version) {\r\n        console.log(version.sha);\r\n        console.log(version.date);\r\n    });\r\n```\r\n\r\n#### Remove:\r\n\r\nУдаление собранных данных версии библиотеки.\r\n\r\n```\r\nvar ds = require('bem-data-source');\r\nds.remove(repo, version, options, dryMode);\r\n```\r\n\r\n* `repo` - обязательный параметр названия библиотеки (ветка, тег, пулл-реквест)\r\n* `version` - обязательный параметр названия версии (ветка, тег, пулл-реквест)\r\n* `options` - опциональные настройки команды.\r\n* `dryMode` - Тестовое выполнение команды. При включенном флаге `dryMode` в значении `true`,\r\nреального удаления данных не произойдет.\r\n\r\n#### Replace:\r\n\r\nЗамена существующего документа (readme, documentation ...).\r\n\r\n```\r\nvar ds = require('bem-data-source');\r\nds.replace(repo, version, options);\r\n```\r\n\r\n* `repo` - обязательный параметр названия библиотеки (ветка, тег, пулл-реквест)\r\n* `version` - обязательный параметр названия версии (ветка, тег, пулл-реквест)\r\n* `options` - дополнительные настройки команды. Объект с полями:\r\n\r\n- `doc` - название документа. Допустимые значения: ('readme', 'changelog', 'migration', 'notes') (Обязательное поле)\r\n- `lang` - язык документа. Если данный параметр отсутствует, то будут заменены все версии документа для списка\r\nязыков указанных в конфигурационном файле.\r\n- `url` - ссылка на `*.md` документ который должен заменить существующий. По своей сути - это\r\nтакая ссылка на документ на github которую можно увидеть в браузере при открытии этого файла на github.\r\nНапример, для README.md bem-data-source: `https://github.com/bem/bem-data-source/blob/master/README.md`\r\n\r\n#### Publish:\r\n\r\nПубликация собраных данных.\r\n\r\n```\r\nvar ds = require('bem-data-source');\r\nds.publish(version, options, dryMode);\r\n```\r\n\r\n* `version` - обязательный параметр названия версии (ветка, тег, пулл-реквест)\r\n* `options` - опциональне настройки команды.\r\n* `dryMode` - Тестовое выполнение команды. При включенном флаге `dryMode` в значении `true`,\r\nреальной публикации данных не произойдет.\r\n\r\nВНИМАНИЕ: при выполнении данной команды `process.cwd()` должен указывать на корневую директорию библиотеки.\r\n\r\n##### Опциональные настройки для команд:\r\n\r\nПомимо специфичных настроек (как например для метода replace), все методы API принимают\r\nобъект с общими настройками. Они включают в себя такие поля:\r\n\r\n* `debug` - флаг для отслеживания внутренней работы храниища данных (по умолчанию `false`).\r\n* `namespace` - пространство имен для key-value хранилища. (по умолчанию `defaultnamespace`)\r\n\r\n## Тестирование\r\n\r\nЗапуск тестов:\r\n\r\n```\r\nnpm run mocha\r\n```\r\n\r\nЗапуск тестов с покрытием:\r\n\r\n```\r\nnpm run istanbul\r\n```\r\n\r\nЗапуск проверки codestyle (jshint и jscs)\r\n\r\n```\r\nnpm test\r\n```\r\n\r\nОтветственный за разработку @bemer\r\n\r\nВопросы и пожелания присылать по адресу: bemer@yandex-team.ru\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}